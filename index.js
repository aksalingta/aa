const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const token = process.env.BOT_TOKEN;
const MODERATION_CHANNEL_ID = '@Nmsssssssdasdasdasd';
const POSTS_CHANNEL_ID = '@NM_Nizhnevartovsk';
const REJECTION_CHANNEL_ID = '@sckghe';

const bot = new TelegramBot(token, { polling: true });

const userStates = {};
const posts = {};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (!username) {
    return bot.sendMessage(chatId,
      `‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –≤ Telegram.\n\n` +
      `–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤–∞—à username –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.\n\n` +
      `üëâ –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"\n3. –ù–∞–∂–º–∏—Ç–µ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π @username\n\n` +
      `–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.`
    );
  }

  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ò—â–µ—à—å —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –º–∏–º–æ–ª–µ—Ç–Ω–æ —É–≤–∏–¥–µ–ª –≥–¥–µ-—Ç–æ –∏ –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –≤ —Å–≤—è–∑–∏ —Å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏?\n\n–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å" —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫.`);
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å.', {
    reply_markup: {
      keyboard: [['–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    userStates[chatId] = {
      state: 'waiting_story',
      tempPost: {
        media: null,
        description: '',
      },
    };
    await bot.sendMessage(chatId, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. ‚ùó –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω ‚ùó.', {
      reply_markup: { remove_keyboard: true },
    });
    return;
  }

  if (userStates[chatId] && userStates[chatId].state === 'waiting_story') {
    const postData = userStates[chatId].tempPost;

    if (msg.caption) {
      postData.description = msg.caption;
    } else if (msg.text) {
      postData.description = msg.text;
    }

    if (msg.photo) {
      postData.media = msg.photo[msg.photo.length - 1].file_id;
    } else if (msg.video) {
      postData.media = msg.video.file_id;
    } else if (msg.document) {
      postData.media = msg.document.file_id;
    } else if (msg.video_note) {
      postData.media = msg.video_note.file_id;
    }

    if (
      (postData.media && postData.description.trim().length > 0) ||
      (postData.media && !postData.description.trim().length) ||
      (!postData.media && postData.description.trim().length > 0)
    ) {
      const descriptionText = postData.description.trim();
      const senderUsername = msg.from.username || msg.from.first_name;

      try {
        const messageOptions = {
          caption: `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${senderUsername}`,
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
              ],
            ],
          },
        };

        let sentMsg;
        if (msg.photo) {
          sentMsg = await bot.sendPhoto(MODERATION_CHANNEL_ID, postData.media, messageOptions);
        } else if (msg.video) {
          sentMsg = await bot.sendVideo(MODERATION_CHANNEL_ID, postData.media, messageOptions);
        } else if (msg.document) {
          sentMsg = await bot.sendDocument(MODERATION_CHANNEL_ID, postData.media, messageOptions);
        } else if (msg.video_note) {
          sentMsg = await bot.sendVideoNote(MODERATION_CHANNEL_ID, postData.media, {
            reply_markup: messageOptions.reply_markup,
          });
        } else {
          sentMsg = await bot.sendMessage(MODERATION_CHANNEL_ID, messageOptions.caption, {
            reply_markup: messageOptions.reply_markup,
          });
        }

        posts[sentMsg.message_id] = {
          postData,
          userId: chatId,
          username: senderUsername,
        };

        delete userStates[chatId];
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:', err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }
});

bot.on('callback_query', async (callbackQuery) => {
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    const data = callbackQuery.data;
    const msg = callbackQuery.message;
    const moderationMsgId = msg.message_id;

    const postEntry = posts[moderationMsgId];
    if (!postEntry) return;

    const { postData, userId, username } = postEntry;

    const replyMarkup = {
      inline_keyboard: [[
        { text: "üíå –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", url: `https://t.me/Nizhnevartovskbot_bot?start=proposal` }
      ]]
    };

    switch (data) {
      case 'accept':
        if (postData.media) {
          await bot.sendPhoto(POSTS_CHANNEL_ID, postData.media, {
            caption: `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: @${username}`,
            reply_markup: replyMarkup
          });
        } else {
          await bot.sendMessage(POSTS_CHANNEL_ID, `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: @${username}`, {
            reply_markup: replyMarkup
          });
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');
        break;

      case 'accept_anon':
        if (postData.media) {
          await bot.sendPhoto(POSTS_CHANNEL_ID, postData.media, {
            caption: `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: –ê–Ω–æ–Ω–∏–º–Ω–æ`,
            reply_markup: replyMarkup
          });
        } else {
          await bot.sendMessage(POSTS_CHANNEL_ID, `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: –ê–Ω–æ–Ω–∏–º–Ω–æ`, {
            reply_markup: replyMarkup
          });
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.');
        break;

      case 'reject':
        if (postData.media) {
          await bot.sendPhoto(REJECTION_CHANNEL_ID, postData.media, {
            caption: `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.`,
          });
        } else {
          await bot.sendMessage(REJECTION_CHANNEL_ID, `${postData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.`);
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.');
        break;
    }

    delete posts[moderationMsgId];
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', err);
  }
});
