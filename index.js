const TelegramBot = require('node-telegram-bot-api');

require('dotenv').config();
const token = process.env.BOT_TOKEN;
const MODERATION_CHANNEL_ID = '@Nmsssssssdasdasdasd'; // –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const POSTS_CHANNEL_ID = '@NM_Nizhnevartovsk'; // –∫–∞–Ω–∞–ª –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
const REJECTION_CHANNEL_ID = '@sckghe'; // –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

const bot = new TelegramBot(token, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const posts = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/start`
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ò—â–µ—à—å —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –º–∏–º–æ–ª–µ—Ç–Ω–æ —É–≤–∏–¥–µ–ª –≥–¥–µ-—Ç–æ –∏ –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –≤ —Å–≤—è–∑–∏ —Å –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏?\n\n–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å" —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫.`);
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å.', {
    reply_markup: {
      keyboard: [['–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å"
  if (text === '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    userStates[chatId] = {
      state: 'waiting_story',
      tempPost: {
        media: null,
        description: '',
      },
    };
    await bot.sendMessage(chatId, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. ‚ùó –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω ‚ùó.', {
      reply_markup: { remove_keyboard: true },
    });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
  if (userStates[chatId] && userStates[chatId].state === 'waiting_story') {
    const postData = userStates[chatId].tempPost;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—Ä–∏–¥—ë—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –º–µ–¥–∏–∞)
    if (msg.caption) {
      postData.description = msg.caption;
    } else if (msg.text) {
      postData.description = msg.text;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if (msg.photo) {
      postData.media = msg.photo[msg.photo.length - 1].file_id;
    } else if (msg.video) {
      postData.media = msg.video.file_id;
    } else if (msg.document) {
      postData.media = msg.document.file_id;
    } else if (msg.video_note) {
      postData.media = msg.video_note.file_id;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    if (
      (postData.media && postData.description.trim().length > 0) || // –ï—Å—Ç—å –∏ –º–µ–¥–∏–∞, –∏ —Ç–µ–∫—Å—Ç
      (postData.media && !postData.description.trim().length) ||    // –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞
      (!postData.media && postData.description.trim().length > 0)   // –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    ) {
      const descriptionText = postData.description.trim();

      try {
        if (postData.media) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º –º–µ–¥–∏–∞
          if (msg.photo) {
            const sentMsg = await bot.sendPhoto(MODERATION_CHANNEL_ID, postData.media, {
              caption: `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${msg.from.username || msg.from.first_name}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                    { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
                  ],
                ],
              },
            });
            posts[sentMsg.message_id] = { postData, userId: chatId };
          } else if (msg.video) {
            const sentMsg = await bot.sendVideo(MODERATION_CHANNEL_ID, postData.media, {
              caption: `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${msg.from.username || msg.from.first_name}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                    { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
                  ],
                ],
              },
            });
            posts[sentMsg.message_id] = { postData, userId: chatId };
          } else if (msg.document) {
            const sentMsg = await bot.sendDocument(MODERATION_CHANNEL_ID, postData.media, {
              caption: `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${msg.from.username || msg.from.first_name}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                    { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
                  ],
                ],
              },
            });
            posts[sentMsg.message_id] = { postData, userId: chatId };
          } else if (msg.video_note) {
            const sentMsg = await bot.sendVideoNote(MODERATION_CHANNEL_ID, postData.media, {
              caption: `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${msg.from.username || msg.from.first_name}`,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                    { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
                  ],
                ],
              },
            });
            posts[sentMsg.message_id] = { postData, userId: chatId };
          }
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
          const sentMsg = await bot.sendMessage(MODERATION_CHANNEL_ID, `${descriptionText}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @${msg.from.username || msg.from.first_name}`, {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'accept' },
                  { text: '–ü—Ä–∏–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data: 'accept_anon' },
                  { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject' },
                ],
              ],
            },
          });
          posts[sentMsg.message_id] = { postData, userId: chatId };
        }

        delete userStates[chatId];
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:', err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    const data = callbackQuery.data;
    const msg = callbackQuery.message;
    const moderationMsgId = msg.message_id;

    const postEntry = posts[moderationMsgId];
    if (!postEntry) {
      return;
    }

    const { postData, userId } = postEntry;
    const username = callbackQuery.from.username || '–ê–Ω–æ–Ω–∏–º';

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º
    const replyMarkup = {
      inline_keyboard: [[
        { text: "üíå –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", url: `https://t.me/Nizhnevartovskbot_bot?start=proposal` }
      ]]
    };

    switch (data) {
      case 'accept':
        if (postData.media) {
          await bot.sendPhoto(POSTS_CHANNEL_ID, postData.media, {
            caption: `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: @${username}`,
            reply_markup: replyMarkup
          });
        } else {
          await bot.sendMessage(POSTS_CHANNEL_ID, `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: @${username}`, {
            reply_markup: replyMarkup
          });
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');
        break;
      case 'accept_anon':
        if (postData.media) {
          await bot.sendPhoto(POSTS_CHANNEL_ID, postData.media, {
            caption: `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: –ê–Ω–æ–Ω–∏–º–Ω–æ`,
            reply_markup: replyMarkup
          });
        } else {
          await bot.sendMessage(POSTS_CHANNEL_ID, `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–ê–≤—Ç–æ—Ä: –ê–Ω–æ–Ω–∏–º–Ω–æ`, {
            reply_markup: replyMarkup
          });
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.');
        break;
      case 'reject':
        if (postData.media) {
          await bot.sendPhoto(REJECTION_CHANNEL_ID, postData.media, {
            caption: `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.`,
          });
        } else {
          await bot.sendMessage(REJECTION_CHANNEL_ID, `${postData.description ? postData.description : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.`);
        }
        await bot.sendMessage(userId, '–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.');
        break;
    }

    delete posts[moderationMsgId];
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', err);
  }
});

// ====== Express-—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======
const express = require('express');
const app = express();

const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('–ë–æ—Ç Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
